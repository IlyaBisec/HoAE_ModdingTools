/*****************************************************************************/
/*  File:   mAlgo.cpp
/*  Desc:   Helper algorithms
/*  Author: Ruslan Shestopalyuk
/*  Date:   09-26-2003
/*****************************************************************************/
#include "stdafx.h"
#include "mAlgo.h"

const Vector3D c_HemisphereNormals256[] = 
{
        Vector3D( 0.0000,   0.0000,     1.0000 ),
        Vector3D( 0.5257,   0.0000,     0.8507 ),
        Vector3D( 0.1625,   0.5000,     0.8507 ),
        Vector3D( -0.4253,  0.3090,     0.8507 ),
        Vector3D( -0.4253,  -0.3090,    0.8507 ),
        Vector3D( 0.1625,   -0.5000,    0.8507 ),
        Vector3D( 0.8944,   0.0000,     0.4472 ),
        Vector3D( 0.2764,   0.8507,     0.4472 ),
        Vector3D( -0.7236,  0.5257,     0.4472 ),
        Vector3D( -0.7236,  -0.5257,    0.4472 ),
        Vector3D( 0.2764,   -0.8507,    0.4472 ),
        Vector3D( 0.6882,   0.5000,     0.5257 ),
        Vector3D( -0.2629,  0.8090,     0.5257 ),
        Vector3D( -0.8507,  -0.0000,    0.5257 ),
        Vector3D( -0.2629,  -0.8090,    0.5257 ),
        Vector3D( 0.6882,   -0.5000,    0.5257 ),
        Vector3D( 0.1380,   0.0000,     0.9904 ),
        Vector3D( 0.2733,   0.0000,     0.9619 ),
        Vector3D( 0.4034,   0.0000,     0.9150 ),
        Vector3D( 0.0426,   0.1312,     0.9904 ),
        Vector3D( 0.0844,   0.2599,     0.9619 ),
        Vector3D( 0.1246,   0.3836,     0.9150 ),
        Vector3D( -0.1116,  0.0811,     0.9904 ),
        Vector3D( -0.2211,  0.1606,     0.9619 ),
        Vector3D( -0.3263,  0.2371,     0.9150 ),
        Vector3D( -0.1116,  -0.0811,    0.9904 ),
        Vector3D( -0.2211,  -0.1606,    0.9619 ),
        Vector3D( -0.3263,  -0.2371,    0.9150 ),
        Vector3D( 0.0426,   -0.1312,    0.9904 ),
        Vector3D( 0.0844,   -0.2599,    0.9619 ),
        Vector3D( 0.1246,   -0.3836,    0.9150 ),
        Vector3D( 0.4493,   0.1331,     0.8834 ),
        Vector3D( 0.3618,   0.2629,     0.8944 ),
        Vector3D( 0.2654,   0.3862,     0.8834 ),
        Vector3D( 0.0123,   0.4684,     0.8834 ),
        Vector3D( -0.1382,  0.4253,     0.8944 ),
        Vector3D( -0.2853,  0.3717,     0.8834 ),
        Vector3D( -0.4417,  0.1564,     0.8834 ),
        Vector3D( -0.4472,  -0.0000,    0.8944 ),
        Vector3D( -0.4417,  -0.1564,    0.8834 ),
        Vector3D( -0.2853,  -0.3717,    0.8834 ),
        Vector3D( -0.1382,  -0.4253,    0.8944 ),
        Vector3D( 0.0123,   -0.4684,    0.8834 ),
        Vector3D( 0.2654,   -0.3862,    0.8834 ),
        Vector3D( 0.3618,   -0.2629,    0.8944 ),
        Vector3D( 0.4493,   -0.1331,    0.8834 ),
        Vector3D( 0.6381,   0.0000,     0.7700 ),
        Vector3D( 0.7382,   0.0000,     0.6746 ),
        Vector3D( 0.8242,   0.0000,     0.5663 ),
        Vector3D( 0.1972,   0.6068,     0.7700 ),
        Vector3D( 0.2281,   0.7020,     0.6746 ),
        Vector3D( 0.2547,   0.7838,     0.5663 ),
        Vector3D( -0.5162,  0.3750,     0.7700 ),
        Vector3D( -0.5972,  0.4339,     0.6746 ),
        Vector3D( -0.6668,  0.4844,     0.5663 ),
        Vector3D( -0.5162,  -0.3750,    0.7700 ),
        Vector3D( -0.5972,  -0.4339,    0.6746 ),
        Vector3D( -0.6668,  -0.4844,    0.5663 ),
        Vector3D( 0.1972,   -0.6068,    0.7700 ),
        Vector3D( 0.2281,   -0.7020,    0.6746 ),
        Vector3D( 0.2547,   -0.7838,    0.5663 ),
        Vector3D( 0.5892,   0.1331,     0.7969 ),
        Vector3D( 0.6382,   0.2629,     0.7236 ),
        Vector3D( 0.6715,   0.3862,     0.6325 ),
        Vector3D( 0.0555,   0.6015,     0.7969 ),
        Vector3D( -0.0528,  0.6882,     0.7236 ),
        Vector3D( -0.1598,  0.7579,     0.6325 ),
        Vector3D( -0.5549,  0.2387,     0.7969 ),
        Vector3D( -0.6708,  0.1625,     0.7236 ),
        Vector3D( -0.7702,  0.0822,     0.6325 ),
        Vector3D( -0.3985,  -0.4540,    0.7969 ),
        Vector3D( -0.3618,  -0.5878,    0.7236 ),
        Vector3D( -0.3162,  -0.7071,    0.6325 ),
        Vector3D( 0.3086,   -0.5193,    0.7969 ),
        Vector3D( 0.4472,   -0.5257,    0.7236 ),
        Vector3D( 0.5748,   -0.5193,    0.6325 ),
        Vector3D( 0.5892,   -0.1331,    0.7969 ),
        Vector3D( 0.6382,   -0.2629,    0.7236 ),
        Vector3D( 0.6715,   -0.3862,    0.6325 ),
        Vector3D( 0.3086,   0.5193,     0.7969 ),
        Vector3D( 0.4472,   0.5257,     0.7236 ),
        Vector3D( 0.5748,   0.5193,     0.6325 ),
        Vector3D( -0.3985,  0.4540,     0.7969 ),
        Vector3D( -0.3618,  0.5878,     0.7236 ),
        Vector3D( -0.3162,  0.7071,     0.6325 ),
        Vector3D( -0.5549,  -0.2387,    0.7969 ),
        Vector3D( -0.6708,  -0.1625,    0.7236 ),
        Vector3D( -0.7702,  -0.0822,    0.6325 ),
        Vector3D( 0.0555,   -0.6015,    0.7969 ),
        Vector3D( -0.0528,  -0.6882,    0.7236 ),
        Vector3D( -0.1598,  -0.7579,    0.6325 ),
        Vector3D( 0.8668,   0.1312,     0.4811 ),
        Vector3D( 0.8226,   0.2599,     0.5057 ),
        Vector3D( 0.7627,   0.3836,     0.5207 ),
        Vector3D( 0.1431,   0.8649,     0.4811 ),
        Vector3D( 0.0070,   0.8627,     0.5057 ),
        Vector3D( -0.1292,  0.8439,     0.5207 ),
        Vector3D( -0.7784,  0.4034,     0.4811 ),
        Vector3D( -0.8183,  0.2733,     0.5057 ),
        Vector3D( -0.8425,  0.1380,     0.5207 ),
        Vector3D( -0.6241,  -0.6156,    0.4811 ),
        Vector3D( -0.5128,  -0.6938,    0.5057 ),
        Vector3D( -0.3916,  -0.7587,    0.5207 ),
        Vector3D( 0.3926,   -0.7838,    0.4811 ),
        Vector3D( 0.5014,   -0.7020,    0.5057 ),
        Vector3D( 0.6005,   -0.6068,    0.5207 ),
        Vector3D( 0.7627,   -0.3836,    0.5207 ),
        Vector3D( 0.8226,   -0.2599,    0.5057 ),
        Vector3D( 0.8668,   -0.1312,    0.4811 ),
        Vector3D( 0.6005,   0.6068,     0.5207 ),
        Vector3D( 0.5014,   0.7020,     0.5057 ),
        Vector3D( 0.3926,   0.7838,     0.4811 ),
        Vector3D( -0.3916,  0.7587,     0.5207 ),
        Vector3D( -0.5128,  0.6938,     0.5057 ),
        Vector3D( -0.6241,  0.6156,     0.4811 ),
        Vector3D( -0.8425,  -0.1380,    0.5207 ),
        Vector3D( -0.8183,  -0.2733,    0.5057 ),
        Vector3D( -0.7784,  -0.4034,    0.4811 ),
        Vector3D( -0.1292,  -0.8439,    0.5207 ),
        Vector3D( 0.0070,   -0.8627,    0.5057 ),
        Vector3D( 0.1431,   -0.8649,    0.4811 ),
        Vector3D( 0.9358,   0.0811,     0.3431 ),
        Vector3D( 0.9593,   0.1606,     0.2325 ),
        Vector3D( 0.7847,   0.4684,     0.4061 ),
        Vector3D( 0.8618,   0.4253,     0.2764 ),
        Vector3D( 0.6880,   0.6015,     0.4061 ),
        Vector3D( 0.6708,   0.6882,     0.2764 ),
        Vector3D( 0.3663,   0.8649,     0.3431 ),
        Vector3D( 0.4492,   0.8627,     0.2325 ),
        Vector3D( 0.2121,   0.9150,     0.3431 ),
        Vector3D( 0.1437,   0.9619,     0.2325 ),
        Vector3D( -0.2030,  0.8910,     0.4061 ),
        Vector3D( -0.1382,  0.9511,     0.2764 ),
        Vector3D( -0.3595,  0.8402,     0.4061 ),
        Vector3D( -0.7094,  0.6156,     0.3431 ),
        Vector3D( -0.8047,  0.4844,     0.3431 ),
        Vector3D( -0.9101,  0.0822,     0.4061 ),
        Vector3D( -0.9472,  0.1625,     0.2764 ),
        Vector3D( -0.9101,  -0.0822,    0.4061 ),
        Vector3D( -0.9472,  -0.1625,    0.2764 ),
        Vector3D( -0.8047,  -0.4844,    0.3431 ),
        Vector3D( -0.8705,  -0.4339,    0.2325 ),
        Vector3D( -0.7094,  -0.6156,    0.3431 ),
        Vector3D( -0.6816,  -0.6938,    0.2325 ),
        Vector3D( -0.3595,  -0.8402,    0.4061 ),
        Vector3D( -0.4472,  -0.8507,    0.2764 ),
        Vector3D( -0.2030,  -0.8910,    0.4061 ),
        Vector3D( -0.1382,  -0.9511,    0.2764 ),
        Vector3D( 0.2121,   -0.9150,    0.3431 ),
        Vector3D( 0.1437,   -0.9619,    0.2325 ),
        Vector3D( 0.3663,   -0.8649,    0.3431 ),
        Vector3D( 0.4492,   -0.8627,    0.2325 ),
        Vector3D( 0.6880,   -0.6015,    0.4061 ),
        Vector3D( 0.6708,   -0.6882,    0.2764 ),
        Vector3D( 0.7847,   -0.4684,    0.4061 ),
        Vector3D( 0.8618,   -0.4253,    0.2764 ),
        Vector3D( 0.9358,   -0.0811,    0.3431 ),
        Vector3D( 0.9593,   -0.1606,    0.2325 ),
        Vector3D( 0.1812,   0.1317,     0.9746 ),
        Vector3D( 0.3177,   0.1323,     0.9389 ),
        Vector3D( 0.2240,   0.2613,     0.9389 ),
        Vector3D( -0.0692,  0.2130,     0.9746 ),
        Vector3D( -0.0277,  0.3431,     0.9389 ),
        Vector3D( -0.1793,  0.2938,     0.9389 ),
        Vector3D( -0.2240,  -0.0000,    0.9746 ),
        Vector3D( -0.3348,  0.0797,     0.9389 ),
        Vector3D( -0.3348,  -0.0797,    0.9389 ),
        Vector3D( -0.0692,  -0.2130,    0.9746 ),
        Vector3D( -0.1793,  -0.2938,    0.9389 ),
        Vector3D( -0.0277,  -0.3431,    0.9389 ),
        Vector3D( 0.1812,   -0.1317,    0.9746 ),
        Vector3D( 0.2240,   -0.2613,    0.9389 ),
        Vector3D( 0.3177,   -0.1323,    0.9389 ),
        Vector3D( 0.5500,   0.3996,     0.7333 ),
        Vector3D( 0.4136,   0.3997,     0.8180 ),
        Vector3D( 0.5080,   0.2699,     0.8180 ),
        Vector3D( -0.2101,  0.6466,     0.7333 ),
        Vector3D( -0.2523,  0.5169,     0.8180 ),
        Vector3D( -0.0997,  0.5665,     0.8180 ),
        Vector3D( -0.6799,  -0.0000,    0.7333 ),
        Vector3D( -0.5696,  -0.0802,    0.8180 ),
        Vector3D( -0.5696,  0.0802,     0.8180 ),
        Vector3D( -0.2101,  -0.6466,    0.7333 ),
        Vector3D( -0.0997,  -0.5665,    0.8180 ),
        Vector3D( -0.2523,  -0.5169,    0.8180 ),
        Vector3D( 0.5500,   -0.3996,    0.7333 ),
        Vector3D( 0.5080,   -0.2699,    0.8180 ),
        Vector3D( 0.4136,   -0.3997,    0.8180 ),
        Vector3D( 0.6953,   -0.1328,    0.7063 ),
        Vector3D( 0.7374,   -0.2618,    0.6227 ),
        Vector3D( 0.7886,   -0.1322,    0.6005 ),
        Vector3D( 0.6953,   0.1328,     0.7063 ),
        Vector3D( 0.7886,   0.1322,     0.6005 ),
        Vector3D( 0.7374,   0.2618,     0.6227 ),
        Vector3D( 0.3412,   0.6202,     0.7063 ),
        Vector3D( 0.4769,   0.6204,     0.6227 ),
        Vector3D( 0.3695,   0.7092,     0.6005 ),
        Vector3D( 0.0886,   0.7023,     0.7063 ),
        Vector3D( 0.1180,   0.7909,     0.6005 ),
        Vector3D( -0.0211,  0.7822,     0.6227 ),
        Vector3D( -0.4845,  0.5161,     0.7063 ),
        Vector3D( -0.4427,  0.6452,     0.6227 ),
        Vector3D( -0.5603,  0.5705,     0.6005 ),
        Vector3D( -0.6406,  0.3013,     0.7063 ),
        Vector3D( -0.7157,  0.3566,     0.6005 ),
        Vector3D( -0.7505,  0.2216,     0.6227 ),
        Vector3D( -0.6406,  -0.3013,    0.7063 ),
        Vector3D( -0.7505,  -0.2216,    0.6227 ),
        Vector3D( -0.7157,  -0.3566,    0.6005 ),
        Vector3D( -0.4845,  -0.5161,    0.7063 ),
        Vector3D( -0.5603,  -0.5705,    0.6005 ),
        Vector3D( -0.4427,  -0.6452,    0.6227 ),
        Vector3D( 0.0886,   -0.7023,    0.7063 ),
        Vector3D( -0.0211,  -0.7822,    0.6227 ),
        Vector3D( 0.1180,   -0.7909,    0.6005 ),
        Vector3D( 0.3412,   -0.6202,    0.7063 ),
        Vector3D( 0.3695,   -0.7092,    0.6005 ),
        Vector3D( 0.4769,   -0.6204,    0.6227 ),
        Vector3D( 0.9199,   0.2960,     0.2571 ),
        Vector3D( 0.8523,   0.3453,     0.3928 ),
        Vector3D( 0.9031,   0.2154,     0.3716 ),
        Vector3D( 0.5658,   0.7835,     0.2571 ),
        Vector3D( 0.4839,   0.7923,     0.3716 ),
        Vector3D( 0.5918,   0.7039,     0.3928 ),
        Vector3D( 0.0028,   0.9664,     0.2571 ),
        Vector3D( -0.0650,  0.9173,     0.3928 ),
        Vector3D( 0.0742,   0.9254,     0.3716 ),
        Vector3D( -0.6040,  0.7050,     0.3716 ),
        Vector3D( -0.4866,  0.7804,     0.3928 ),
        Vector3D( -0.9182,  0.3013,     0.2571 ),
        Vector3D( -0.8925,  0.2216,     0.3928 ),
        Vector3D( -0.8572,  0.3566,     0.3716 ),
        Vector3D( -0.9182,  -0.3013,    0.2571 ),
        Vector3D( -0.8572,  -0.3566,    0.3716 ),
        Vector3D( -0.8925,  -0.2216,    0.3928 ),
        Vector3D( -0.5703,  -0.7802,    0.2571 ),
        Vector3D( -0.4866,  -0.7804,    0.3928 ),
        Vector3D( -0.6040,  -0.7050,    0.3716 ),
        Vector3D( 0.0028,   -0.9664,    0.2571 ),
        Vector3D( 0.0742,   -0.9254,    0.3716 ),
        Vector3D( -0.0650,  -0.9173,    0.3928 ),
        Vector3D( 0.5658,   -0.7835,    0.2571 ),
        Vector3D( 0.5918,   -0.7039,    0.3928 ),
        Vector3D( 0.4839,   -0.7923,    0.3716 ),
        Vector3D( 0.9199,   -0.2960,    0.2571 ),
        Vector3D( 0.9031,   -0.2154,    0.3716 ),
        Vector3D( 0.8523,   -0.3453,    0.3928 ),
        Vector3D( 0.9719,   0.0000,     0.2355 ),
        Vector3D( 0.7766,   0.5643,     0.2801 ),
        Vector3D( 0.3003,   0.9243,     0.2355 ),
        Vector3D( -0.2966,  0.9130,     0.2801 ),
        Vector3D( -0.9600,  -0.0000,    0.2801 ),
        Vector3D( -0.7863,  -0.5713,    0.2355 ),
        Vector3D( -0.2966,  -0.9130,    0.2801 ),
        Vector3D( 0.3003,   -0.9243,    0.2355 ),
        Vector3D( 0.7766,   -0.5643,    0.2801 )
}; // c_HemisphereNormals256

BYTE QuantizeUpperHemisphereNormal( const Vector3D& normal )
{
    BYTE  maxIdx = 0;
    float maxDot = normal.dot( c_HemisphereNormals256[0] );
    for (int i = 1; i <= 255; i++)
    {   
        float dot = normal.dot( c_HemisphereNormals256[i] );
        if (dot > maxDot)
        {
            maxIdx = i;
            maxDot = dot;
        }
    }
    return maxIdx;
} // QuantizeUpperHemisphereNormal

const Vector3D& GetUpperHemisphereNormal( BYTE idx )
{
    return c_HemisphereNormals256[idx];
}

struct NPair 
{
    int x, y;
};
const NPair c_RingPoints1[] = { {0, -1}, {1, 0}, {0, 1}, {-1, 0} };
const NPair c_RingPoints2[] = { { 0, -2}, { 1, -2}, { 1, -1}, { 2, -1}, 
                                { 2,  0}, { 2,  1}, { 1,  1}, { 1,  2}, 
                                { 0,  2}, {-1,  2}, {-1,  1}, {-2,  1}, 
                                {-2,  0}, {-2, -1}, {-1, -1}, {-1, -2} };

const NPair c_RingPoints3[] = { { 0, -3}, { 1, -3}, { 2, -2}, { 3, -1}, 
                                { 3,  0}, { 3,  1}, { 2,  2}, { 1,  3}, 
                                { 0,  3}, {-1,  3}, {-2,  2}, {-3,  1}, 
                                {-3,  0}, {-3, -1}, {-2, -2}, {-1, -3} };

const NPair c_RingPoints4[] = { { 0, -4}, { 1, -4}, { 2, -3}, { 3, -3}, { 3, -2}, { 4, -1}, 
                                { 4,  0}, { 4,  1}, { 3,  2}, { 3,  3}, { 2,  3}, { 1,  4}, 
                                { 0,  4}, {-1,  4}, {-2,  3}, {-3,  3}, {-3,  2}, {-4,  1}, 
                                {-4,  0}, {-4, -1}, {-3, -2}, {-3, -3}, {-2, -3}, {-1, -4} };

const NPair c_RingPoints5[] = { { 0, -5}, { 1, -5}, { 2, -4}, { 3, -4}, { 4, -3}, { 4, -2}, { 5, -1}, 
                                { 5,  0}, { 5,  1}, { 4,  2}, { 4,  3}, { 3,  4}, { 2,  4}, { 1,  5},
                                { 0,  5}, {-1,  5}, {-2,  4}, {-3,  4}, {-4,  3}, {-4,  2}, {-5,  1},
                                {-5,  0}, {-5, -1}, {-4, -2}, {-4, -3}, {-3, -4}, {-2, -4}, {-5, -5} };

int GetMaxRingLevel()
{
    return 5;
}

int GetNumRingPoints( int level ) 
{ 
    if (level == 0) return 1;
    else if (level == 1) return 4;
    else if (level == 2) return 16;
    else if (level == 3) return 16;
    else if (level == 4) return 24;
    else if (level == 5) return 28;
    else return 0;
} // GetNumRingPoints

bool GetRingPoint( int level, int idx, int& nx, int& ny )
{
    if (level == 0) { nx = 0, ny = 0; }
    else if (level == 1) { nx = c_RingPoints1[idx].x, ny = c_RingPoints1[idx].y; }
    else if (level == 2) { nx = c_RingPoints2[idx].x, ny = c_RingPoints2[idx].y; }
    else if (level == 3) { nx = c_RingPoints3[idx].x, ny = c_RingPoints3[idx].y; }
    else if (level == 4) { nx = c_RingPoints4[idx].x, ny = c_RingPoints4[idx].y; }
    else if (level == 5) { nx = c_RingPoints5[idx].x, ny = c_RingPoints5[idx].y; }
    else return false;
    return true;
} // GetRingPoint

